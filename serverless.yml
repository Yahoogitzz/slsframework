app: dev
org: yahooslsfw
service: slsframework
# service: dynamodb-crud-api

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: us-west-1
  # stages:
  # prod:
  #   observability: true # turn on observability in the "prod" Stage.
  # dev:
  #   observability: true # turn on observability in the "dev" Stage.
  # default:
  #   observability: false # turn off observability for all other Stages.
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.postsTableName}
    STRIPE_API_KEY: ${param:STRIPE_API_KEY}

custom:
  postsTableName: posts-table-${self:provider.stage}

plugins:
  - serverless-iam-roles-per-function

functions:
  getPost:
    handler: handlerapi.getPost
    name: get-post-${self:provider.stage}
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: post/{postId}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt PostsTable.Arn
  createPost:
    handler: handlerapi.createPost
    name: create-post-${self:provider.stage}
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: post
          method: POST
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: !GetAtt PostsTable.Arn        
  createMultiplePosts:
    handler: handlerapi.createMultiplePosts
    name: create-multiple-posts-${self:provider.stage}
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: post/bulk
          method: POST
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:BatchWriteItem"
        Resource: !GetAtt PostsTable.Arn
  updatePost:
    handler: handlerapi.updatePost
    name: update-post-${self:provider.stage}
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: post/{postId}
          method: PUT
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
        Resource: !GetAtt PostsTable.Arn
  deletePost:
    handler: handlerapi.deletePost
    name: delete-post-${self:provider.stage}
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: post/{postId}
          method: DELETE
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:DeleteItem"
        Resource: !GetAtt PostsTable.Arn
  getAllPosts:
    handler: handlerapi.getAllPosts
    name: get-all-posts-${self:provider.stage}
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: posts
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt PostsTable.Arn

resources:
  Resources:
    PostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.postsTableName}
        AttributeDefinitions:
          - AttributeName: postId
            AttributeType: S
        KeySchema:
          - AttributeName: postId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
